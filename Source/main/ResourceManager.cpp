#include "ResourceManager.h"

#include <iomanip>
#include <iostream>
#include <sstream>

using namespace juce;

Image ResourceManager::getImageFromFile(const String& filename)
{
#if defined(OS_MACIOS) || defined(OS_MACOSX)
  #if defined(OS_MACIOS)
    File resourcesDirectory(File::getSpecialLocation(File::currentExecutableFile).getParentDirectory());
  #else
    File resourcesDirectory(File::getSpecialLocation(File::currentApplicationFile).getChildFile("Contents").getChildFile("Resources"));
  #endif
    File imageFile = resourcesDirectory.getChildFile(filename);
    if (!imageFile.exists())
    {
        std::cerr << "Image file <" << (const char*) imageFile.getFullPathName().toUTF8() << "> does not exist" << std::endl;
        jassert(imageFile.exists());
        return Image::null;
    }
    return ImageCache::getFromFile( imageFile );
#else
    // If we're not on iOS or OSX then the resouce will have to come from a file generated by the binarybuilder...
    jassertfalse

    /*
    string jucifiedFilename = Util::searchAndReplace(filename, "-", "");
    jucifiedFilename.replace(jucifiedFilename.find_first_of("."), 1, "_");
    int dataSizeInBytes = 0;
    const char* imageBytes = BinaryDataForWindows::getNamedResource(jucifiedfilename, dataSizeInBytes);
    jassert(imageBytes != NULL);
    jassert(dataSizeInBytes > 0);
    return ImageCache::getFromMemory( imageBytes, dataSizeInBytes );
    */
#endif
}

String ResourceManager::getShaderFromFile(const String& filename)
{
#if defined(OS_MACIOS) || defined(OS_MACOSX)
  #if defined(OS_MACIOS)
    File shadersDirectory(File::getSpecialLocation(File::currentExecutableFile).getParentDirectory());
    jassert(shadersDirectory.exists());
  #elif defined(OS_MACOSX)
    File shadersDirectory(File::getSpecialLocation(File::currentApplicationFile).getChildFile("Contents").getChildFile("Resources").getChildFile("Shaders"));
  #endif
    File shaderFile = shadersDirectory.getChildFile(filename);
    if (!shaderFile.exists())
    {
        std::cerr << "Shader file <" << (const char*) shaderFile.getFullPathName().toUTF8() << "> does not exist" << std::endl;
        jassertfalse
        return String::empty;
    }
    else
    {
       return shaderFile.loadFileAsString();
   }
#else
    // If we're not on iOS or OSX then the resouce will have to come from a file generated by the binarybuilder...
    jassertfalse
#endif
}

File ResourceManager::getFontFromFile(const String& filename)
{
#if defined(OS_MACIOS) || defined(OS_MACOSX)
  #if defined(OS_MACIOS)
    File fontDirectory(File::getSpecialLocation(File::currentExecutableFile).getParentDirectory());
    jassert(fontDirectory.exists());
  #else
    File fontDirectory(File::getSpecialLocation(File::currentApplicationFile).getChildFile("Contents").getChildFile("Resources").getChildFile("Fonts"));
  #endif
    File fontFile = fontDirectory.getChildFile(filename);
    if (!fontFile.exists())
    {
        std::cerr << "Font file <" << (const char*) fontFile.getFullPathName().toUTF8() << "> does not exist" << std::endl;
        jassertfalse
        return File::nonexistent;
    }
    else
    {
       return fontFile;
   }
#else
    // If we're not on iOS or OSX then the resouce will have to come from a file generated by the binarybuilder...
    jassertfalse
#endif
}



